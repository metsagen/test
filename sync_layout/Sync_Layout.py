# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SyncLayout
                                 A QGIS plugin
 マップとレイアウトビューの位置を同期します。
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by h.s
        email                : metsagen@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import *
from qgis.utils import *

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Sync_Layout_dialog import SyncLayoutDialog
import os.path

class SyncLayout:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SyncLayout_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sync Layout')

        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'SyncLayout')
        self.toolbar.setObjectName(u'SyncLayout')

        #print "** INITIALIZING test"

        self.pluginIsActive = False
        self.dockwidget = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SyncLayout', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Sync_Layout/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        #self.first_start = True

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING test"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
#         for action in self.actions:
#             self.iface.removePluginMenu(
#                 self.tr(u'&Sync Layout'),
#                 action)
#             self.iface.removeToolBarIcon(action)

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&test'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def synclayout(self):
        if self.dockwidget.checkBox.isChecked():
            project = QgsProject.instance()
            projectLayoutManager = project.layoutManager()
            targetLayout = projectLayoutManager.layoutByName(self.dockwidget.comboBox.currentText())
            
            for item in targetLayout.items():
                if type(item) is QgsLayoutItemMap and item.displayName()==self.dockwidget.layoutItemBox.currentText():                
                        targetMap=item
                                
            canvas = iface.mapCanvas()
            
            moveX = targetMap.extent().center().x()-canvas.extent().center().x()
            moveY = targetMap.extent().center().y()-canvas.extent().center().y()
            
            unitCon=targetMap. mapUnitsToLayoutUnits()
            targetMap.moveContent(-moveX * unitCon, moveY * unitCon)
            targetMap.setScale(canvas.scale())        
    
    def onSyncLayout(self):
        iface.mapCanvas().extentsChanged.connect(self.synclayout)

 
    def updateLayoutList(self):
        self.dockwidget.comboBox.clear()
        project = QgsProject.instance()
        projectLayoutManager = project.layoutManager()
        targetLayoutList = projectLayoutManager.layouts()
        layoutList=[]
        for targetLayout in targetLayoutList:
            layoutList.append(targetLayout.name())
        self.dockwidget.comboBox.addItems(layoutList)               

    def updateLayoutItemList(self):
        self.dockwidget.layoutItemBox.clear()
        layoutname=self.dockwidget.comboBox.currentText()
        project = QgsProject.instance()
        projectLayoutManager = project.layoutManager()
        targetLayout = projectLayoutManager.layoutByName(layoutname)
        itemList=[]
        for item in targetLayout.items():
            #print(type(item))
            if type(item) is QgsLayoutItemMap:
                itemList.append(item.displayName())
                #print(item.displayName())
        self.dockwidget.layoutItemBox.addItems(itemList) 
            
    def run(self):
        """Run method that performs all the real work"""
        
        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING test"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = SyncLayoutDialog()
                #チェックボックスはオフにしておく
                self.dockwidget.checkBox.setCheckState(False)
                #レイアウトリストの準備
                self.updateLayoutList()
            
            #レイアウトリスト変更時
            self.dockwidget.comboBox.currentTextChanged.connect(self.updateLayoutItemList)
            #チェックボックス変更時
            self.dockwidget.checkBox.stateChanged.connect(self.onSyncLayout)
                
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()        
        
